/*
MIT License
Copyright (c) 2020: Michele Maione
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
#include <iostream>
#include "HeldKarp.hpp"
#include "Christofides.hpp"

using namespace TSP;

void Run(const vector<vector<uint_least8_t>> &DistanceMatrix2D)
{
	HeldKarp hk(DistanceMatrix2D);
	hk.Run();
}

void Run_Random(const uint_least8_t NumberOfNodes)
{
	const auto DistanceMatrix2D = HeldKarp::New_RND_Distances(NumberOfNodes);
	Run(DistanceMatrix2D);
}

void StartElaboration_aTSP(const string graphToSolve, const uint_least8_t NumberOfNodes)
{
	const vector<vector<uint_least8_t>> distance3 =
	{
		{ 0, 1, 3 },
		{ 3, 0, 2 },
		{ 5, 1, 0 }
	};

	const vector<vector<uint_least8_t>> distance4 =
	{
		{ 0, 2, 9, 10 },
		{ 1, 0, 6, 4 },
		{ 15, 7, 0, 8 },
		{ 6, 3, 12, 0 }
	};

	const vector<vector<uint_least8_t>> distance5 =
	{
		{ 0, 1, 1, 2, 4, },
		{ 1, 0, 3, 2, 2, },
		{ 1, 3, 0, 4, 1, },
		{ 2, 2, 4, 0, 3, },
		{ 4, 2, 1, 3, 0, },
	};

	const vector<vector<uint_least8_t>> distance6 =
	{
		{ 0, 59, 75, 22, 46, 38 },
		{ 25, 0, 79, 60, 75, 12 },
		{ 85, 26, 0, 58, 56, 27 },
		{ 5, 82, 18, 0, 90, 90 },
		{ 74, 77, 1, 46, 0, 79 },
		{ 76, 23, 94, 61, 47, 0 }
	};

	const vector<vector<uint_least8_t>> distance15 =
	{
		{ 0, 5, 4, 4, 9, 7, 13, 3, 14, 9, 2, 14, 6, 1, 1, },
		{ 5, 0, 7, 3, 14, 2, 12, 4, 7, 2, 12, 11, 3, 11, 4, },
		{ 4, 7, 0, 11, 13, 2, 1, 11, 5, 2, 6, 14, 3, 12, 3, },
		{ 4, 3, 11, 0, 12, 5, 2, 14, 12, 8, 3, 1, 8, 9, 13, },
		{ 9, 14, 13, 12, 0, 14, 14, 4, 8, 3, 4, 7, 7, 7, 11, },
		{ 7, 2, 2, 5, 14, 0, 10, 6, 1, 7, 2, 3, 1, 14, 10, },
		{ 13, 12, 1, 2, 14, 10, 0, 8, 14, 3, 13, 1, 13, 6, 2, },
		{ 3, 4, 11, 14, 4, 6, 8, 0, 14, 4, 14, 10, 10, 3, 1, },
		{ 14, 7, 5, 12, 8, 1, 14, 14, 0, 2, 1, 8, 12, 13, 2, },
		{ 9, 2, 2, 8, 3, 7, 3, 4, 2, 0, 8, 10, 5, 7, 2, },
		{ 2, 12, 6, 3, 4, 2, 13, 14, 1, 8, 0, 14, 2, 7, 11, },
		{ 14, 11, 14, 1, 7, 3, 1, 10, 8, 10, 14, 0, 5, 2, 2, },
		{ 6, 3, 3, 8, 7, 1, 13, 10, 12, 5, 2, 5, 0, 12, 2, },
		{ 1, 11, 12, 9, 7, 14, 6, 3, 13, 7, 7, 2, 12, 0, 13, },
		{ 1, 4, 3, 13, 11, 10, 2, 1, 2, 2, 11, 2, 2, 13, 0, },
	};

	const vector<vector<uint_least8_t>> distance20 =
	{
		{ 0, 44, 12, 11, 44, 5, 63, 74, 50, 43, 77, 36, 47, 50, 94, 61, 75, 80, 51, 39 },
		{ 58, 0, 90, 24, 86, 24, 97, 67, 85, 17, 85, 37, 58, 60, 39, 6, 8, 16, 9, 30 },
		{ 48, 37, 0, 76, 45, 23, 32, 11, 43, 14, 82, 43, 19, 17, 64, 1, 76, 18, 46, 91 },
		{ 69, 100, 74, 0, 74, 63, 11, 96, 53, 36, 94, 73, 73, 67, 62, 17, 51, 48, 21, 20 },
		{ 95, 38, 55, 48, 0, 6, 65, 16, 99, 54, 85, 18, 95, 82, 11, 30, 24, 53, 62, 76 },
		{ 38, 30, 77, 52, 68, 0, 1, 87, 79, 68, 8, 98, 73, 2, 30, 16, 29, 19, 90, 36 },
		{ 79, 31, 3, 82, 97, 40, 0, 47, 7, 30, 53, 49, 60, 82, 24, 78, 1, 73, 76, 60 },
		{ 71, 44, 54, 90, 38, 87, 72, 0, 79, 7, 88, 71, 7, 68, 78, 50, 91, 28, 24, 10 },
		{ 14, 87, 97, 87, 74, 84, 29, 90, 0, 13, 85, 92, 43, 62, 37, 62, 8, 15, 10, 35 },
		{ 16, 1, 70, 44, 50, 37, 96, 8, 91, 0, 62, 67, 44, 68, 70, 98, 21, 75, 23, 69 },
		{ 44, 100, 82, 81, 32, 22, 7, 67, 93, 23, 0, 7, 96, 6, 51, 3, 48, 53, 30, 1 },
		{ 12, 32, 42, 59, 64, 36, 14, 58, 15, 50, 7, 0, 35, 67, 92, 59, 98, 14, 75, 71 },
		{ 40, 1, 32, 34, 7, 41, 8, 87, 30, 78, 89, 27, 0, 6, 34, 40, 44, 73, 84, 58 },
		{ 18, 36, 100, 75, 3, 77, 78, 29, 14, 74, 28, 11, 19, 0, 9, 14, 20, 20, 47, 96 },
		{ 67, 32, 95, 89, 41, 83, 77, 40, 78, 17, 51, 69, 40, 55, 0, 51, 43, 53, 87, 39 },
		{ 37, 87, 97, 11, 3, 10, 23, 69, 58, 69, 76, 21, 82, 90, 70, 0, 35, 94, 92, 99 },
		{ 44, 30, 36, 43, 31, 77, 36, 19, 84, 15, 45, 62, 79, 18, 35, 12, 0, 92, 54, 4 },
		{ 79, 52, 17, 73, 33, 100, 16, 85, 52, 5, 20, 44, 37, 28, 94, 8, 57, 0, 93, 1 },
		{ 8, 44, 3, 67, 92, 53, 15, 41, 39, 95, 41, 75, 22, 41, 72, 39, 35, 5, 0, 67 },
		{ 52, 78, 77, 78, 12, 13, 93, 13, 98, 60, 87, 85, 59, 61, 60, 82, 23, 88, 88, 0 }
	};

	const vector<vector<uint_least8_t>> distance25 = {
		{ 0, 22, 4, 9, 7, 20, 14, 12, 11, 24, 6, 5, 18, 4, 16, 14, 1, 6, 23, 22, 10, 22, 20, 9, 20, },
		{ 12, 0, 17, 20, 16, 19, 13, 4, 14, 13, 5, 11, 3, 16, 20, 18, 12, 16, 23, 17, 5, 3, 21, 2, 14, },
		{ 23, 7, 0, 9, 8, 11, 3, 20, 3, 20, 13, 19, 4, 18, 21, 17, 11, 2, 16, 5, 23, 5, 12, 9, 10, },
		{ 6, 10, 19, 0, 23, 3, 4, 17, 16, 15, 6, 18, 12, 5, 20, 4, 10, 10, 9, 7, 3, 2, 14, 19, 20, },
		{ 6, 7, 3, 12, 0, 16, 3, 10, 11, 22, 23, 2, 1, 9, 21, 24, 16, 20, 4, 13, 13, 4, 6, 7, 7, },
		{ 12, 20, 14, 21, 5, 0, 6, 9, 17, 16, 24, 17, 21, 2, 5, 1, 12, 21, 7, 14, 6, 18, 3, 2, 13, },
		{ 9, 16, 8, 22, 1, 7, 0, 17, 1, 24, 20, 1, 21, 14, 13, 7, 16, 15, 10, 10, 10, 4, 3, 15, 16, },
		{ 4, 1, 16, 21, 16, 1, 13, 0, 10, 19, 1, 12, 14, 23, 11, 16, 10, 8, 17, 21, 6, 5, 4, 23, 8, },
		{ 24, 22, 16, 8, 17, 16, 10, 6, 0, 2, 17, 19, 24, 15, 20, 9, 24, 8, 15, 2, 14, 1, 18, 18, 5, },
		{ 19, 1, 3, 12, 7, 9, 11, 24, 3, 0, 9, 22, 18, 10, 5, 18, 3, 16, 7, 13, 7, 16, 16, 19, 12, },
		{ 8, 22, 23, 15, 3, 10, 7, 7, 5, 11, 0, 14, 16, 14, 22, 24, 17, 6, 20, 22, 6, 23, 15, 14, 3, },
		{ 21, 24, 23, 19, 6, 11, 13, 3, 6, 15, 4, 0, 9, 10, 20, 22, 18, 3, 15, 14, 23, 16, 3, 13, 18, },
		{ 7, 20, 2, 21, 19, 14, 14, 17, 8, 21, 19, 3, 0, 12, 12, 2, 19, 23, 11, 10, 24, 19, 16, 8, 11, },
		{ 23, 5, 4, 8, 2, 16, 11, 19, 11, 5, 13, 11, 10, 0, 17, 9, 17, 1, 11, 2, 14, 2, 19, 7, 15, },
		{ 14, 20, 1, 5, 17, 14, 23, 15, 12, 15, 22, 14, 10, 7, 0, 16, 17, 10, 24, 16, 7, 23, 15, 9, 6, },
		{ 2, 18, 23, 8, 15, 19, 9, 4, 22, 13, 18, 7, 16, 6, 3, 0, 21, 6, 22, 23, 19, 19, 19, 7, 19, },
		{ 20, 9, 4, 2, 3, 1, 16, 23, 11, 19, 4, 23, 16, 16, 1, 18, 0, 6, 19, 17, 21, 14, 10, 2, 4, },
		{ 22, 20, 1, 2, 17, 15, 11, 7, 12, 5, 13, 6, 15, 7, 1, 22, 22, 0, 19, 20, 21, 3, 4, 6, 15, },
		{ 22, 5, 13, 1, 3, 10, 5, 10, 8, 24, 5, 8, 24, 15, 6, 21, 9, 21, 0, 12, 11, 4, 20, 3, 23, },
		{ 18, 19, 24, 19, 14, 5, 2, 18, 14, 10, 4, 13, 2, 11, 5, 2, 24, 3, 22, 0, 16, 3, 18, 22, 7, },
		{ 13, 24, 13, 7, 17, 19, 12, 2, 2, 14, 7, 9, 10, 11, 21, 3, 22, 11, 18, 15, 0, 11, 18, 19, 22, },
		{ 17, 10, 12, 2, 22, 12, 21, 1, 21, 18, 6, 14, 17, 20, 2, 20, 23, 3, 11, 13, 5, 0, 20, 16, 14, },
		{ 6, 19, 18, 16, 24, 8, 21, 20, 6, 15, 14, 7, 8, 11, 4, 15, 18, 6, 12, 17, 5, 7, 0, 10, 3, },
		{ 10, 23, 16, 9, 7, 7, 17, 21, 19, 22, 20, 4, 18, 5, 2, 14, 22, 11, 9, 3, 6, 20, 12, 0, 13, },
		{ 23, 21, 20, 23, 9, 24, 10, 24, 9, 16, 7, 1, 16, 12, 13, 24, 22, 18, 13, 10, 15, 1, 22, 13, 0, },
	};

	const vector<vector<uint_least8_t>> distance30 = {
		{ 0, 17, 8, 12, 16, 11, 1, 2, 22, 16, 17, 20, 4, 13, 5, 14, 8, 1, 18, 11, 14, 7, 23, 19, 19, 15, 18, 17, 7, 16, },
		{ 11, 0, 20, 3, 1, 24, 4, 22, 6, 20, 7, 22, 24, 4, 3, 1, 14, 7, 24, 18, 16, 17, 17, 21, 15, 2, 20, 19, 14, 18, },
		{ 1, 17, 0, 9, 20, 6, 5, 22, 17, 4, 13, 1, 16, 2, 6, 12, 13, 15, 3, 21, 18, 6, 9, 19, 24, 15, 23, 19, 23, 13, },
		{ 23, 5, 9, 0, 9, 13, 20, 14, 14, 4, 23, 22, 4, 21, 4, 11, 17, 1, 16, 12, 10, 2, 12, 17, 23, 20, 12, 16, 23, 9, },
		{ 5, 7, 11, 23, 0, 5, 5, 8, 17, 8, 13, 10, 22, 24, 11, 5, 23, 15, 9, 5, 8, 7, 15, 8, 7, 14, 11, 12, 13, 10, },
		{ 13, 2, 4, 16, 5, 0, 24, 16, 11, 6, 16, 24, 4, 24, 17, 3, 2, 12, 3, 1, 12, 24, 6, 3, 12, 16, 3, 14, 23, 4, },
		{ 9, 18, 17, 19, 7, 19, 0, 12, 7, 7, 19, 11, 13, 13, 9, 17, 6, 4, 7, 22, 5, 6, 3, 9, 12, 1, 11, 8, 23, 17, },
		{ 24, 3, 10, 18, 7, 21, 23, 0, 7, 9, 18, 23, 16, 19, 5, 8, 15, 24, 12, 21, 10, 6, 12, 20, 16, 19, 23, 7, 10, 6, },
		{ 18, 21, 12, 13, 15, 7, 17, 1, 0, 20, 6, 13, 19, 24, 20, 14, 24, 13, 11, 22, 1, 22, 2, 23, 11, 13, 11, 13, 7, 18, },
		{ 23, 9, 15, 13, 2, 15, 21, 12, 3, 0, 5, 22, 15, 14, 4, 6, 9, 15, 7, 17, 6, 17, 6, 13, 9, 9, 9, 17, 22, 1, },
		{ 1, 4, 19, 10, 7, 22, 22, 23, 7, 22, 0, 5, 18, 12, 11, 6, 24, 10, 8, 23, 18, 3, 22, 5, 21, 2, 2, 18, 21, 6, },
		{ 4, 17, 23, 23, 11, 3, 2, 4, 6, 7, 7, 0, 9, 11, 9, 9, 12, 13, 5, 20, 7, 10, 23, 1, 19, 5, 23, 3, 23, 23, },
		{ 9, 6, 5, 2, 17, 3, 6, 6, 19, 2, 9, 4, 0, 20, 5, 2, 16, 9, 17, 14, 21, 9, 14, 21, 23, 14, 21, 6, 16, 5, },
		{ 18, 13, 1, 4, 6, 22, 1, 3, 8, 18, 7, 4, 7, 0, 18, 4, 11, 3, 14, 19, 24, 3, 21, 6, 13, 3, 14, 19, 10, 6, },
		{ 12, 21, 21, 14, 2, 1, 13, 9, 1, 15, 8, 2, 13, 2, 0, 23, 7, 17, 3, 21, 17, 12, 11, 8, 12, 17, 2, 22, 7, 12, },
		{ 1, 16, 3, 15, 21, 20, 22, 10, 14, 5, 17, 15, 3, 3, 23, 0, 11, 22, 14, 19, 8, 7, 10, 12, 23, 18, 19, 2, 13, 10, },
		{ 21, 24, 3, 7, 22, 1, 23, 6, 11, 17, 7, 2, 22, 4, 22, 4, 0, 2, 9, 9, 9, 1, 20, 12, 4, 24, 6, 15, 5, 4, },
		{ 22, 2, 18, 9, 24, 18, 6, 14, 9, 6, 3, 1, 6, 12, 22, 13, 6, 0, 9, 7, 15, 20, 16, 11, 18, 5, 10, 2, 12, 24, },
		{ 8, 16, 10, 19, 2, 13, 15, 13, 17, 22, 11, 16, 14, 18, 3, 7, 9, 19, 0, 8, 15, 16, 18, 21, 9, 14, 9, 7, 16, 1, },
		{ 5, 15, 16, 18, 15, 1, 14, 18, 6, 5, 23, 8, 24, 13, 11, 20, 23, 7, 22, 0, 8, 12, 21, 15, 18, 22, 9, 14, 20, 1, },
		{ 5, 18, 7, 23, 13, 13, 8, 19, 22, 23, 18, 14, 14, 3, 15, 10, 7, 17, 5, 10, 0, 13, 16, 3, 10, 9, 14, 9, 24, 22, },
		{ 21, 7, 11, 18, 17, 2, 12, 17, 9, 11, 1, 4, 1, 2, 8, 5, 19, 23, 18, 24, 9, 0, 15, 17, 10, 11, 12, 14, 15, 22, },
		{ 15, 24, 5, 8, 22, 2, 17, 7, 20, 21, 1, 4, 17, 22, 6, 5, 6, 12, 15, 20, 5, 14, 0, 16, 15, 24, 14, 6, 14, 2, },
		{ 8, 5, 13, 21, 20, 19, 12, 20, 20, 4, 24, 15, 23, 24, 2, 17, 21, 16, 18, 11, 6, 5, 24, 0, 24, 20, 17, 1, 9, 15, },
		{ 9, 8, 20, 3, 5, 12, 16, 13, 8, 22, 4, 18, 9, 11, 9, 15, 5, 7, 15, 14, 22, 4, 23, 13, 0, 4, 21, 4, 6, 14, },
		{ 1, 3, 18, 4, 6, 12, 21, 5, 12, 18, 12, 10, 5, 13, 18, 14, 18, 21, 19, 16, 9, 15, 10, 10, 19, 0, 17, 5, 10, 7, },
		{ 24, 9, 9, 11, 24, 7, 19, 10, 15, 4, 23, 12, 10, 18, 14, 4, 4, 18, 15, 5, 24, 10, 1, 10, 14, 5, 0, 10, 18, 8, },
		{ 9, 13, 8, 11, 22, 12, 9, 4, 24, 5, 7, 23, 4, 3, 17, 20, 4, 23, 22, 21, 7, 16, 24, 14, 6, 8, 14, 0, 9, 24, },
		{ 21, 20, 22, 2, 2, 6, 15, 16, 1, 13, 6, 5, 1, 4, 13, 9, 6, 20, 8, 8, 15, 10, 6, 12, 22, 2, 18, 14, 0, 18, },
		{ 6, 14, 22, 1, 4, 3, 10, 9, 22, 2, 21, 2, 4, 3, 11, 17, 16, 7, 12, 11, 5, 24, 13, 7, 1, 10, 12, 14, 10, 0, },
	};

	if (graphToSolve == "random")
	{
		Run_Random(NumberOfNodes);
	}
	else
	{
		if (graphToSolve == "all" || graphToSolve == "3")
			Run(distance3);

		if (graphToSolve == "all" || graphToSolve == "4")
			Run(distance4);

		if (graphToSolve == "all" || graphToSolve == "5")
			Run(distance5);

		if (graphToSolve == "all" || graphToSolve == "6")
			Run(distance6);

		if (graphToSolve == "all" || graphToSolve == "15")
			Run(distance15);

		if (graphToSolve == "all" || graphToSolve == "20")
			Run(distance20);

		if (graphToSolve == "all" || graphToSolve == "25")
			Run(distance25);

		if (graphToSolve == "all" || graphToSolve == "30")
			Run(distance30);
	}
}

void StartElaboration_sTSP(const string graphToSolve, const uint_least8_t NumberOfNodes)
{
	const vector<vector<uint_least8_t>> distance3 =
	{
		{ 0, 2, 13, },
		{ 2, 0, 12, },
		{ 13, 12, 0, },
	};

	const vector<vector<uint_least8_t>> distance4 =
	{
		{ 0, 9, 18, 17, },
		{ 9, 0, 10, 1, },
		{ 18, 10, 0, 11, },
		{ 17, 1, 11, 0, },
	};

	const vector<vector<uint_least8_t>> distance5 =
	{
		{ 0, 18, 11, 7, 2, },
		{ 18, 0, 14, 17, 3, },
		{ 11, 14, 0, 8, 18, },
		{ 7, 17, 8, 0, 13, },
		{ 2, 3, 18, 13, 0, },
	};

	const vector<vector<uint_least8_t>> distance6 =
	{
		{ 0, 13, 14, 18, 5, 19, },
		{ 13, 0, 7, 7, 15, 12, },
		{ 14, 7, 0, 15, 17, 17, },
		{ 18, 7, 15, 0, 4, 4, },
		{ 5, 15, 17, 4, 0, 18, },
		{ 19, 12, 17, 4, 18, 0, },
	};

	const vector<vector<uint_least8_t>> distance15 =
	{
		{ 0, 11, 7, 13, 12, 13, 19, 18, 19, 6, 9, 8, 8, 18, 1, },
		{ 11, 0, 15, 3, 14, 8, 10, 1, 12, 3, 9, 13, 3, 12, 3, },
		{ 7, 15, 0, 17, 5, 13, 2, 7, 4, 3, 3, 10, 9, 16, 5, },
		{ 13, 3, 17, 0, 14, 14, 15, 13, 15, 11, 19, 8, 14, 17, 13, },
		{ 12, 14, 5, 14, 0, 4, 9, 14, 3, 6, 9, 18, 1, 9, 2, },
		{ 13, 8, 13, 14, 4, 0, 16, 1, 15, 12, 8, 2, 4, 15, 17, },
		{ 19, 10, 2, 15, 9, 16, 0, 5, 13, 17, 3, 16, 6, 17, 10, },
		{ 18, 1, 7, 13, 14, 1, 5, 0, 13, 3, 4, 4, 9, 1, 12, },
		{ 19, 12, 4, 15, 3, 15, 13, 13, 0, 10, 12, 13, 1, 16, 14, },
		{ 6, 3, 3, 11, 6, 12, 17, 3, 10, 0, 11, 9, 7, 4, 17, },
		{ 9, 9, 3, 19, 9, 8, 3, 4, 12, 11, 0, 14, 19, 1, 8, },
		{ 8, 13, 10, 8, 18, 2, 16, 4, 13, 9, 14, 0, 10, 15, 12, },
		{ 8, 3, 9, 14, 1, 4, 6, 9, 1, 7, 19, 10, 0, 16, 12, },
		{ 18, 12, 16, 17, 9, 15, 17, 1, 16, 4, 1, 15, 16, 0, 1, },
		{ 1, 3, 5, 13, 2, 17, 10, 12, 14, 17, 8, 12, 12, 1, 0, },
	};

	const vector<vector<uint_least8_t>> distance20 =
	{
		{ 0, 6, 6, 17, 17, 9, 18, 6, 17, 6, 18, 8, 1, 4, 3, 15, 8, 4, 18, 3, },
		{ 6, 0, 13, 4, 11, 19, 18, 12, 17, 9, 5, 13, 9, 11, 12, 8, 12, 5, 6, 15, },
		{ 6, 13, 0, 4, 8, 15, 6, 11, 2, 5, 10, 13, 16, 18, 12, 2, 11, 14, 13, 18, },
		{ 17, 4, 4, 0, 16, 15, 7, 19, 5, 11, 9, 1, 5, 17, 7, 15, 12, 12, 17, 9, },
		{ 17, 11, 8, 16, 0, 12, 19, 11, 8, 8, 12, 9, 14, 8, 18, 2, 11, 12, 11, 17, },
		{ 9, 19, 15, 15, 12, 0, 17, 18, 10, 15, 10, 19, 15, 18, 16, 7, 5, 7, 5, 18, },
		{ 18, 18, 6, 7, 19, 17, 0, 15, 2, 5, 1, 4, 9, 11, 3, 6, 11, 4, 6, 12, },
		{ 6, 12, 11, 19, 11, 18, 15, 0, 12, 7, 10, 18, 8, 13, 19, 9, 16, 3, 16, 8, },
		{ 17, 17, 2, 5, 8, 10, 2, 12, 0, 10, 17, 2, 14, 1, 3, 6, 5, 16, 13, 17, },
		{ 6, 9, 5, 11, 8, 15, 5, 7, 10, 0, 17, 10, 9, 3, 6, 14, 13, 18, 12, 4, },
		{ 18, 5, 10, 9, 12, 10, 1, 10, 17, 17, 0, 7, 4, 12, 7, 8, 16, 13, 5, 9, },
		{ 8, 13, 13, 1, 9, 19, 4, 18, 2, 10, 7, 0, 18, 18, 8, 12, 13, 12, 10, 9, },
		{ 1, 9, 16, 5, 14, 15, 9, 8, 14, 9, 4, 18, 0, 5, 8, 17, 1, 16, 19, 9, },
		{ 4, 11, 18, 17, 8, 18, 11, 13, 1, 3, 12, 18, 5, 0, 12, 8, 19, 11, 14, 15, },
		{ 3, 12, 12, 7, 18, 16, 3, 19, 3, 6, 7, 8, 8, 12, 0, 4, 4, 4, 4, 3, },
		{ 15, 8, 2, 15, 2, 7, 6, 9, 6, 14, 8, 12, 17, 8, 4, 0, 13, 10, 7, 13, },
		{ 8, 12, 11, 12, 11, 5, 11, 16, 5, 13, 16, 13, 1, 19, 4, 13, 0, 7, 12, 1, },
		{ 4, 5, 14, 12, 12, 7, 4, 3, 16, 18, 13, 12, 16, 11, 4, 10, 7, 0, 7, 14, },
		{ 18, 6, 13, 17, 11, 5, 6, 16, 13, 12, 5, 10, 19, 14, 4, 7, 12, 7, 0, 18, },
		{ 3, 15, 18, 9, 17, 18, 12, 8, 17, 4, 9, 9, 9, 15, 3, 13, 1, 14, 18, 0, },
	};

	const vector<vector<uint_least8_t>> distance25 =
	{
		{ 0, 9, 17, 16, 10, 15, 6, 8, 11, 14, 4, 10, 5, 3, 15, 1, 17, 3, 10, 14, 14, 15, 4, 9, 10, },
		{ 9, 0, 18, 1, 2, 12, 2, 6, 19, 9, 5, 11, 3, 10, 3, 1, 18, 9, 16, 13, 10, 1, 12, 9, 7, },
		{ 17, 18, 0, 12, 13, 9, 9, 10, 13, 1, 4, 6, 9, 6, 12, 15, 4, 15, 9, 9, 4, 2, 19, 12, 12, },
		{ 16, 1, 12, 0, 10, 14, 3, 12, 5, 18, 2, 14, 9, 17, 9, 13, 9, 19, 12, 16, 10, 16, 5, 8, 17, },
		{ 10, 2, 13, 10, 0, 1, 17, 8, 3, 6, 1, 4, 1, 16, 11, 9, 15, 1, 3, 14, 7, 18, 9, 2, 2, },
		{ 15, 12, 9, 14, 1, 0, 11, 1, 8, 3, 3, 15, 16, 17, 13, 14, 5, 15, 5, 15, 9, 17, 14, 9, 19, },
		{ 6, 2, 9, 3, 17, 11, 0, 17, 17, 14, 12, 6, 19, 18, 9, 16, 17, 9, 11, 8, 3, 6, 6, 1, 9, },
		{ 8, 6, 10, 12, 8, 1, 17, 0, 6, 1, 11, 4, 7, 8, 2, 7, 14, 11, 6, 14, 17, 12, 9, 10, 5, },
		{ 11, 19, 13, 5, 3, 8, 17, 6, 0, 4, 17, 9, 3, 3, 5, 6, 1, 19, 4, 4, 17, 12, 18, 9, 9, },
		{ 14, 9, 1, 18, 6, 3, 14, 1, 4, 0, 9, 9, 9, 8, 14, 10, 7, 11, 19, 6, 7, 4, 2, 1, 17, },
		{ 4, 5, 4, 2, 1, 3, 12, 11, 17, 9, 0, 2, 18, 18, 2, 9, 12, 7, 3, 16, 5, 3, 8, 5, 18, },
		{ 10, 11, 6, 14, 4, 15, 6, 4, 9, 9, 2, 0, 10, 3, 13, 17, 5, 8, 4, 1, 2, 11, 13, 11, 17, },
		{ 5, 3, 9, 9, 1, 16, 19, 7, 3, 9, 18, 10, 0, 3, 17, 17, 3, 19, 18, 7, 2, 18, 13, 16, 19, },
		{ 3, 10, 6, 17, 16, 17, 18, 8, 3, 8, 18, 3, 3, 0, 17, 3, 6, 13, 4, 11, 3, 2, 12, 10, 3, },
		{ 15, 3, 12, 9, 11, 13, 9, 2, 5, 14, 2, 13, 17, 17, 0, 14, 6, 16, 12, 13, 2, 17, 8, 8, 18, },
		{ 1, 1, 15, 13, 9, 14, 16, 7, 6, 10, 9, 17, 17, 3, 14, 0, 14, 4, 6, 18, 3, 4, 9, 18, 17, },
		{ 17, 18, 4, 9, 15, 5, 17, 14, 1, 7, 12, 5, 3, 6, 6, 14, 0, 11, 9, 16, 17, 8, 6, 18, 8, },
		{ 3, 9, 15, 19, 1, 15, 9, 11, 19, 11, 7, 8, 19, 13, 16, 4, 11, 0, 17, 19, 11, 9, 6, 13, 14, },
		{ 10, 16, 9, 12, 3, 5, 11, 6, 4, 19, 3, 4, 18, 4, 12, 6, 9, 17, 0, 4, 16, 3, 7, 13, 19, },
		{ 14, 13, 9, 16, 14, 15, 8, 14, 4, 6, 16, 1, 7, 11, 13, 18, 16, 19, 4, 0, 2, 6, 8, 2, 4, },
		{ 14, 10, 4, 10, 7, 9, 3, 17, 17, 7, 5, 2, 2, 3, 2, 3, 17, 11, 16, 2, 0, 19, 19, 14, 2, },
		{ 15, 1, 2, 16, 18, 17, 6, 12, 12, 4, 3, 11, 18, 2, 17, 4, 8, 9, 3, 6, 19, 0, 7, 13, 4, },
		{ 4, 12, 19, 5, 9, 14, 6, 9, 18, 2, 8, 13, 13, 12, 8, 9, 6, 6, 7, 8, 19, 7, 0, 15, 18, },
		{ 9, 9, 12, 8, 2, 9, 1, 10, 9, 1, 5, 11, 16, 10, 8, 18, 18, 13, 13, 2, 14, 13, 15, 0, 14, },
		{ 10, 7, 12, 17, 2, 19, 9, 5, 9, 17, 18, 17, 19, 3, 18, 17, 8, 14, 19, 4, 2, 4, 18, 14, 0, },
	};

	const vector<vector<uint_least8_t>> distance30 =
	{
		{ 0, 18, 9, 8, 7, 14, 14, 19, 8, 17, 10, 8, 10, 12, 15, 6, 2, 3, 5, 17, 9, 4, 8, 16, 5, 7, 19, 13, 16, 13, },
		{ 18, 0, 17, 5, 10, 14, 19, 6, 8, 14, 1, 19, 6, 3, 17, 11, 12, 15, 9, 8, 19, 16, 5, 11, 19, 17, 10, 11, 10, 12, },
		{ 9, 17, 0, 4, 1, 15, 1, 4, 15, 19, 5, 18, 16, 12, 10, 18, 8, 3, 6, 12, 7, 6, 17, 5, 10, 17, 12, 14, 1, 8, },
		{ 8, 5, 4, 0, 7, 5, 13, 5, 9, 16, 15, 11, 1, 4, 5, 18, 3, 11, 7, 17, 13, 15, 10, 18, 17, 9, 14, 6, 4, 5, },
		{ 7, 10, 1, 7, 0, 12, 8, 14, 3, 4, 7, 4, 7, 13, 19, 5, 11, 4, 13, 3, 17, 3, 2, 8, 8, 4, 7, 17, 13, 5, },
		{ 14, 14, 15, 5, 12, 0, 16, 4, 3, 10, 17, 11, 7, 2, 4, 4, 7, 16, 17, 1, 17, 15, 15, 17, 7, 12, 2, 12, 16, 15, },
		{ 14, 19, 1, 13, 8, 16, 0, 1, 7, 13, 18, 15, 2, 6, 11, 1, 18, 7, 3, 2, 16, 15, 9, 18, 10, 19, 10, 15, 1, 5, },
		{ 19, 6, 4, 5, 14, 4, 1, 0, 1, 10, 12, 8, 9, 10, 2, 3, 5, 8, 7, 9, 11, 18, 9, 6, 3, 18, 16, 16, 19, 13, },
		{ 8, 8, 15, 9, 3, 3, 7, 1, 0, 15, 14, 19, 3, 18, 14, 11, 13, 7, 19, 1, 2, 12, 9, 3, 14, 16, 1, 19, 15, 3, },
		{ 17, 14, 19, 16, 4, 10, 13, 10, 15, 0, 15, 14, 7, 4, 11, 9, 4, 17, 11, 19, 4, 6, 8, 14, 18, 8, 7, 11, 8, 11, },
		{ 10, 1, 5, 15, 7, 17, 18, 12, 14, 15, 0, 11, 2, 8, 9, 10, 7, 1, 4, 8, 2, 15, 16, 4, 11, 1, 1, 12, 18, 8, },
		{ 8, 19, 18, 11, 4, 11, 15, 8, 19, 14, 11, 0, 5, 7, 15, 15, 19, 17, 16, 4, 14, 5, 6, 10, 9, 12, 4, 11, 13, 7, },
		{ 10, 6, 16, 1, 7, 7, 2, 9, 3, 7, 2, 5, 0, 18, 14, 5, 8, 1, 9, 10, 5, 8, 2, 17, 14, 17, 16, 9, 4, 3, },
		{ 12, 3, 12, 4, 13, 2, 6, 10, 18, 4, 8, 7, 18, 0, 4, 16, 7, 8, 11, 13, 3, 7, 18, 2, 12, 6, 4, 1, 19, 7, },
		{ 15, 17, 10, 5, 19, 4, 11, 2, 14, 11, 9, 15, 14, 4, 0, 14, 13, 4, 4, 16, 6, 6, 6, 15, 9, 15, 7, 19, 7, 10, },
		{ 6, 11, 18, 18, 5, 4, 1, 3, 11, 9, 10, 15, 5, 16, 14, 0, 2, 6, 10, 19, 15, 7, 18, 7, 2, 3, 2, 3, 7, 17, },
		{ 2, 12, 8, 3, 11, 7, 18, 5, 13, 4, 7, 19, 8, 7, 13, 2, 0, 18, 4, 1, 17, 7, 4, 3, 5, 1, 6, 17, 10, 2, },
		{ 3, 15, 3, 11, 4, 16, 7, 8, 7, 17, 1, 17, 1, 8, 4, 6, 18, 0, 12, 3, 18, 15, 7, 12, 12, 11, 1, 14, 1, 4, },
		{ 5, 9, 6, 7, 13, 17, 3, 7, 19, 11, 4, 16, 9, 11, 4, 10, 4, 12, 0, 1, 15, 6, 2, 2, 15, 4, 19, 8, 17, 6, },
		{ 17, 8, 12, 17, 3, 1, 2, 9, 1, 19, 8, 4, 10, 13, 16, 19, 1, 3, 1, 0, 14, 10, 13, 3, 7, 16, 5, 4, 2, 6, },
		{ 9, 19, 7, 13, 17, 17, 16, 11, 2, 4, 2, 14, 5, 3, 6, 15, 17, 18, 15, 14, 0, 5, 6, 5, 3, 7, 14, 11, 15, 7, },
		{ 4, 16, 6, 15, 3, 15, 15, 18, 12, 6, 15, 5, 8, 7, 6, 7, 7, 15, 6, 10, 5, 0, 18, 10, 1, 13, 6, 8, 17, 3, },
		{ 8, 5, 17, 10, 2, 15, 9, 9, 9, 8, 16, 6, 2, 18, 6, 18, 4, 7, 2, 13, 6, 18, 0, 19, 11, 14, 11, 13, 15, 17, },
		{ 16, 11, 5, 18, 8, 17, 18, 6, 3, 14, 4, 10, 17, 2, 15, 7, 3, 12, 2, 3, 5, 10, 19, 0, 5, 6, 14, 9, 6, 14, },
		{ 5, 19, 10, 17, 8, 7, 10, 3, 14, 18, 11, 9, 14, 12, 9, 2, 5, 12, 15, 7, 3, 1, 11, 5, 0, 15, 10, 18, 18, 15, },
		{ 7, 17, 17, 9, 4, 12, 19, 18, 16, 8, 1, 12, 17, 6, 15, 3, 1, 11, 4, 16, 7, 13, 14, 6, 15, 0, 10, 2, 19, 14, },
		{ 19, 10, 12, 14, 7, 2, 10, 16, 1, 7, 1, 4, 16, 4, 7, 2, 6, 1, 19, 5, 14, 6, 11, 14, 10, 10, 0, 1, 13, 5, },
		{ 13, 11, 14, 6, 17, 12, 15, 16, 19, 11, 12, 11, 9, 1, 19, 3, 17, 14, 8, 4, 11, 8, 13, 9, 18, 2, 1, 0, 2, 18, },
		{ 16, 10, 1, 4, 13, 16, 1, 19, 15, 8, 18, 13, 4, 19, 7, 7, 10, 1, 17, 2, 15, 17, 15, 6, 18, 19, 13, 2, 0, 15, },
		{ 13, 12, 8, 5, 5, 15, 5, 13, 3, 11, 8, 7, 3, 7, 10, 17, 2, 4, 6, 6, 7, 3, 17, 14, 15, 14, 5, 18, 15, 0, },
	};

	if (graphToSolve == "random")
	{
		Run_Random(NumberOfNodes);
	}
	else
	{
		if (graphToSolve == "all" || graphToSolve == "3")
			Run(distance3);

		if (graphToSolve == "all" || graphToSolve == "4")
			Run(distance4);

		if (graphToSolve == "all" || graphToSolve == "5")
			Run(distance5);

		if (graphToSolve == "all" || graphToSolve == "6")
			Run(distance6);

		if (graphToSolve == "all" || graphToSolve == "15")
			Run(distance15);

		if (graphToSolve == "all" || graphToSolve == "20")
			Run(distance20);

		if (graphToSolve == "all" || graphToSolve == "25")
			Run(distance25);

		if (graphToSolve == "all" || graphToSolve == "30")
			Run(distance30);
	}
}

void WriteTitle()
{
	cout
		<< "Held-Karp algorithm to solve the Traveling Salesman Problem" << endl
		<< endl
		<< "Held-Karp-algorithm parameters: " << endl
		<< " [graph to solve = {3, 4, 5, 6, 15, 20, 25, 30, all, random}]" << endl
		<< " [number of node of random graph = {3 - 255}]" << endl
		<< endl
		<< endl
		<< "Copyright 2020 (c) [MAIONE MIKY]. All rights reserved." << endl
		<< "Licensed under the MIT License." << endl
		<< endl
		<< endl;
}

int main(int argc, char **argv)
{
	WriteTitle();

	try
	{
		if (argc > 2)
		{
			const string graphToSolve = argv[1];
			const uint_least8_t NumberOfNodes = atoi(argv[2]);

			StartElaboration_aTSP(graphToSolve, NumberOfNodes);
		}
	}
	catch (const exception &e)
	{
		cout << endl << "Exception occurred: " << e.what() << endl;
	}

	cout << endl << "End." << endl;
	system("pause");
}